#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Nov 26, 2017 06:47:49 PM
import sys
import re
import tkinter.filedialog as fdbox
import tkinter.messagebox as fmsgbox

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import dbGaPSeek_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(False, False)
    top = dbGaPSeek (root)
    dbGaPSeek_support.init(root, top)
    root.mainloop()

w = None
def create_dbGaPSeek(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = dbGaPSeek (w)
    dbGaPSeek_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_dbGapSeek():
    global w
    w.destroy()
    w = None

class dbGaPSeek:
    def loadtemplate1(self):
        filename = fdbox.askopenfilename(filetypes=[("All files", "*.*")])
        self.Entry1.delete(0,END)
        self.Entry1.insert(0,filename)
        return

    def loadtemplate2(self):
        filename = fdbox.askopenfilename(filetypes=[("All files", "*.*")])
        self.Entry5.delete(0, END)
        self.Entry5.insert(0, filename)
        return

    def doRefresh(self):
        self.Entry1.delete(0, END)
        self.Entry2.delete(0, END)
        self.Entry3.delete(0, END)
        self.Entry4.delete(0, END)
        self.Entry5.delete(0, END)
        self.Label6.configure(text="Awaiting user input")
        return

    def findMatches(self):
        condition1 = ((self.Entry1.get() is "") or (self.Entry2.get() is "") or (self.Entry3.get() is "") or
               (self.Entry4.get() is "") or (self.Entry5.get() is ""))
        if(condition1 is True):
            self.Label6.configure(text="Invalid user input. Please check.")
            #fmsgbox.showinfo("dbGaPSeek", "Invalid user input. Please check")
            return
        else:
            self.Label6.configure(text="Finding matches .... Please wait")

        isNumber = False
        counter = 0
        resultfile = open(self.Entry5.get(), 'w')
        with open(self.Entry1.get()) as dbgapfile:
            for line in dbgapfile:
                str1 = re.split("\s+",line) #str1 = re.split('; |, |\*|\n',line)
                if(len(str1) >= 8):
                    try:
                        int(str1[7])
                        int(str1[6])
                        isNumber = True
                    except:
                        isNumber = False
                    if(isNumber):
                        tempInt1 = int(str1[7])
                        tempInt2 = int(str1[6])
                        chrome = int(self.Entry2.get())
                        lower = int(self.Entry3.get())
                        upper = int(self.Entry4.get())
                        if((tempInt1 >= lower) and (tempInt1 <= upper) and (tempInt2 == chrome)):
                            resultfile.write(line)
                            counter = counter + 1
        resultfile.close()
        self.Label6.configure(text="Finished searching ")
        fmsgbox.showinfo("Search results","FOUND " + str(counter) + " MATCHES and wrote to the file " + self.Entry5.get())


    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("600x450+872+317")
        top.title("dbGaPSeek")
        top.configure(background="#d9d9d9")



        self.Label1 = Label(top)
        self.Label1.place(relx=0.13, rely=0.2, height=26, width=65)
        self.Label1.configure(anchor=W)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(justify=LEFT)
        self.Label1.configure(text='''Input file''')

        self.Label2 = Label(top)
        self.Label2.place(relx=0.13, rely=0.4, height=26, width=142)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor=W)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(justify=LEFT)
        self.Label2.configure(text='''Range lower limit''')
        self.Label2.configure(width=142)

        self.Label3 = Label(top)
        self.Label3.place(relx=0.13, rely=0.3, height=26, width=152)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor=W)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(justify=LEFT)
        self.Label3.configure(text='''Chromosome number''')
        self.Label3.configure(width=152)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.13, rely=0.5, height=26, width=122)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(anchor=W)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(justify=LEFT)
        self.Label4.configure(text='''Range upper limit''')
        self.Label4.configure(width=122)

        self.Label5 = Label(top)
        self.Label5.place(relx=0.13, rely=0.61, height=26, width=132)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(anchor=W)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(justify=LEFT)
        self.Label5.configure(text='''Output file''')
        self.Label5.configure(width=132)

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.42, rely=0.2, relheight=0.05, relwidth=0.34)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")

        self.Entry2 = Entry(top)
        self.Entry2.place(relx=0.42, rely=0.3, relheight=0.05, relwidth=0.34)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")

        self.Entry3 = Entry(top)
        self.Entry3.place(relx=0.42, rely=0.4, relheight=0.05, relwidth=0.34)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        self.Entry4 = Entry(top)
        self.Entry4.place(relx=0.42, rely=0.5, relheight=0.05, relwidth=0.34)
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="black")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(selectbackground="#c4c4c4")
        self.Entry4.configure(selectforeground="black")

        self.Entry5 = Entry(top)
        self.Entry5.place(relx=0.42, rely=0.61, relheight=0.05, relwidth=0.34)
        self.Entry5.configure(background="white")
        self.Entry5.configure(disabledforeground="#a3a3a3")
        self.Entry5.configure(font="TkFixedFont")
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(highlightbackground="#d9d9d9")
        self.Entry5.configure(highlightcolor="black")
        self.Entry5.configure(insertbackground="black")
        self.Entry5.configure(selectbackground="#c4c4c4")
        self.Entry5.configure(selectforeground="black")

        self.Button1 = Button(top)
        self.Button1.place(relx=0.82, rely=0.18, height=33, width=76)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Browse''')
        self.Button1.configure(width=76, command = self.loadtemplate1 )

        self.Button2 = Button(top)
        self.Button2.place(relx=0.82, rely=0.59, height=33, width=76)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Browse''', command = self.loadtemplate2)

        self.Button3 = Button(top)
        self.Button3.place(relx=0.13, rely=0.72, height=33, width=76)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Refresh''', command = self.doRefresh)

        self.Button4 = Button(top)
        self.Button4.place(relx=0.42, rely=0.72, height=33, width=146)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Find matches''', command = self.findMatches)
        self.Button4.configure(width=146)

        self.Label6 = Label(top)
        self.Label6.place(relx=0.13, rely=0.85, height=33, width=200)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(anchor=W)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(justify=LEFT)
        self.Label6.configure(text='''Awaiting user input''')
        self.Label6.configure(width=200)






if __name__ == '__main__':
    vp_start_gui()



